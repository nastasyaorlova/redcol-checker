import streamlit as st
import re
from difflib import SequenceMatcher

st.set_page_config(page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–¥–∫–æ–ª–ª–µ–≥–∏–π", layout="wide")

st.title("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ —Ä–µ–¥–∫–æ–ª–ª–µ–≥–∏–π")
st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–ª–µ–Ω–∞—Ö —Ä–µ–¥–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–≥–∏–π –¥–≤—É—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ (–¥–æ–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤–≤–µ–¥–µ–Ω–æ–º—É –∂—É—Ä–Ω–∞–ª—É).–í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –∏—Å–∫–ª—é—á–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—á—ë—Ç.")

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def extract_names(text):
    pattern = r'[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+(?: [–ê-–Ø–Å][–∞-—è—ë]+)?'
    matches = re.findall(pattern, text)
    return list(set(matches))

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()

def compare_names(list1, list2, threshold=0.9):
    matches = []
    for name1 in list1:
        for name2 in list2:
            if similar(name1, name2) >= threshold:
                matches.append((name1, name2))
    return matches

# --- –í–≤–æ–¥ ---
col1, col2 = st.columns(2)
with col1:
    text1 = st.text_area("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∫–æ–ª–ª–µ–≥–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ ‚Ññ 1", height=400)
with col2:
    text2 = st.text_area("–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∫–æ–ª–ª–µ–≥–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ ‚Ññ 2", height=400)

threshold = st.slider("–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏–º—ë–Ω (0.9‚Äì1.0)", 0.9, 1.0, 0.9, 0.01)

# --- –°–µ—Å—Å–∏—è ---
if "matches" not in st.session_state:
    st.session_state.matches = []
if "checked" not in st.session_state:
    st.session_state.checked = []
if "names1" not in st.session_state:
    st.session_state.names1 = []

# --- –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
    names1 = extract_names(text1)
    names2 = extract_names(text2)
    matches = compare_names(names1, names2, threshold)

    st.session_state.matches = matches
    st.session_state.checked = [True] * len(matches)
    st.session_state.names1 = names1

# --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
if st.session_state.matches:
    st.subheader("üîÅ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ **—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è**:")

    updated_checked = []
    for i, (name1, name2) in enumerate(st.session_state.matches):
        label = f"{name1} ‚âà {name2}"
        checked = st.checkbox(label, value=st.session_state.checked[i], key=f"match_{i}")
        updated_checked.append(checked)

    st.session_state.checked = updated_checked

    selected = [match for match, flag in zip(st.session_state.matches, updated_checked) if flag]
    rejected = [match for match, flag in zip(st.session_state.matches, updated_checked) if not flag]

    count_selected = len(selected)
    count_rejected = len(rejected)
    total_names1 = len(set(st.session_state.names1))

    # üìê –ù–æ–≤—ã–π —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç
    adjusted_denominator = total_names1 - count_rejected
    percent_overlap = (count_selected / adjusted_denominator * 100) if adjusted_denominator > 0 else 0

    st.markdown("#### üìê –ò—Ç–æ–≥ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    st.write(f"- **–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:** {count_selected}")
    st.write(f"- **–û—à–∏–±–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–µ–Ω–æ):** {count_rejected}")
    st.write(f"- **–î–æ–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–æ—Ç–Ω. –∫ –∂—É—Ä–Ω–∞–ª—É 1, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ):** {percent_overlap:.1f}%")

    if count_selected > 0:
        st.markdown("#### ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        for name1, name2 in selected:
            st.write(f"- {name1} ‚âà {name2}")

else:
    st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–°—Ä–∞–≤–Ω–∏—Ç—å'**, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
